import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//This code was partially taken from http://ankurm.com/codearchive/infix-postfix-conversion-using-stack-java/  (lines 65-83 and lines 85-118)

class Infix2Postfix {
	private static boolean isOpenBracket(char m) {
		if (m == '(')
			return true;
		else
			return false;
	}

	private static boolean isOperator(char m) {
		if (m == '+' || m == '-' || m == '/' || m == '*')
			return true;
		else
			return false;
	}

	private static boolean isNumOrLetter(char operand) {
		if ((operand >= '0' && operand <= '9') || (operand >= 'a' && operand <= 'z')
				|| (operand >= 'A' && operand <= 'Z'))
			return true;
		else
			return false;
	}

	private static int orderOfOps(char character) {
		int orderInOps;
	
		
		switch (character) {
		case '+':
			orderInOps = 3;
			break;
		case '-':
			orderInOps = 2;
			break;
		case '*':
			orderInOps = 5;
			break;
		case '/':
			orderInOps = 4;
			break;
		case '%':
			orderInOps = 1;
			break;
		default:
				orderInOps = 0;
		}
		return orderInOps;
	}

	public static String convert(String str) {
		String str2 = str;
		str = "";
		//Removes all of the spaces
		for(int i = 0; i < str2.length(); i++){
			if(str2.charAt(i) != ' '){
				str += str2.charAt(i);
			}
		}
		char ch;
		ADTStack s = new ADTStack();
		int cnt, j;
		j = 0;
		boolean needSpace = false;
		char postfix[] = new char[str.length() + str.length()];
		for (cnt = 0; cnt < str.length(); cnt++) {
			ch = str.charAt(cnt);
			if (isOpenBracket(ch))
				s.push(ch);
			else if (isNumOrLetter(ch)){
				if(needSpace){
					postfix[j++] = ' ';
					needSpace = false;
				}
				postfix[j++] = ch;
				
			}
			
			else if (isOperator(ch)){
				
				needSpace = true;
				if (s.isEmpty())
					s.push(ch);
				else {
					if (orderOfOps(ch) >= orderOfOps(s.peek()))
						s.push(ch);
					else {
						
						while (orderOfOps(ch) < orderOfOps(s.peek())){
							
							postfix[j++] = s.pop();
						}
						
						s.push(ch);
					}
				}
			}
			else if (!isOpenBracket(ch)) {
				while (!isOpenBracket(s.peek()))
					postfix[j++] = s.pop();
				if (isOpenBracket(s.peek()))
					s.pop();
			}
		}
		while (!s.isEmpty()) {
			postfix[j++] = s.pop();
		}
		
		String test = new String(postfix);
		return test;
	}


		
	}
	



	

/* TEST WITH THIS DATA
a1 * ( b + c )
( a * b + c
a * ( b + c ) +
1a * ( b + c )
a+(b+c)
(a+b)+c
a-b*c
(a/b)*(c/d)
a/(b+c*d-e)
a-b*c+d/e
a1+(a2+a3)
(12/134)*(12/132)
A * 2 / 6
( B + C ) / ( 7 * 2 + 3 )
a + b - c
a + - b c
( ( a + c ) ) + 4
*/
