public class Postfix2Infix {
public static String postfix2infix (ADTList tokens){
		
		boolean flag = true; 
		String output, operand1, operand2; 
		ADT2Stack s = new ADT2Stack();
		
	    
	    for(int i = 1; i < tokens.size() + 1; i++) {
	    	
	    	String ch = (String) tokens.get(i);
	   
	    	if (ch.equals("+") || ch.equals("-") || ch.equals("*") || ch.equals("/")){
	    		
	    		operand2 = (String) s.pop(); 
	    		operand1 = (String) s.pop(); 
	    		
	    		if (operand1 == null || operand2 == null ){
	    			flag = false;  
	    		} // end if operand is null
	    		
	    		output = " ( " + operand1 + ch + operand2 + " ) "; 	    		 
	    		s.push(output);
	    		
	    	}else{
	    		s.push(ch);
	    		
	    	}	    	
	    } // for loop 
	    
	    output = (String) s.pop(); 
	    
	    if (s.isEmpty() == false){
	    	flag = false; 
	    }
	    
	    if (flag == true){
	    	return output; 
	    } else {
	    	return "The above infix expression is not a valid expression."; 
	    }
	} // postfix2infix


	
}
/* TEST WITH THIS DATA
a1 * ( b + c )
( a * b + c
a * ( b + c ) +
1a * ( b + c )
a+(b+c)
(a+b)+c
a-b*c
(a/b)*(c/d)
a/(b+c*d-e)
a-b*c+d/e
a1+(a2+a3)
(12/134)*(12/132)
A * 2 / 6
( B + C ) / ( 7 * 2 + 3 )
a + b - c
a + - b c
( ( a + c ) ) + 4
*/

