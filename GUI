import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.Scanner;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;

public class GUI extends JFrame {
	static String[] originalData = new String[100];
	static String[] toPostfixData = new String[100];
	static String[] toInfixData = new String[100];
	static String[] displayData = new String[300];
	static JButton doEverything = new JButton("Read text file and display infix and postfix");
	static JButton exit = new JButton("Exit");
	static JList display = extracted();
	static Container bottom = new Container();
	static JScrollPane scroller = new JScrollPane();

	private static JList extracted() {
		return new JList(displayData);
	}

	public GUI() {
		exit.addActionListener(new exitListener());
		doEverything.addActionListener(new doEverythingListener());
		setTitle("Infix-Postfix Application");
		setSize(346, 500); // default size is 0,0
		setLocation(10, 200); // default is 0,0 (top left corner)
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	public static void main(String[] args) throws FileNotFoundException {
		Tokenizer myList = new Tokenizer();

		for (int i = 0; i < displayData.length; i++) {
			displayData[i] = " ";
		}

		JFrame f = new GUI();

		bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));

		f.add(scroller);
		f.add(bottom, BorderLayout.SOUTH);

		scroller.setViewportView(display);
		bottom.add(doEverything);
		bottom.add(exit);

		f.setVisible(true);
	}

	public class exitListener implements ActionListener {

		public void actionPerformed(ActionEvent arg0) {

			System.exit(0);
		}
	}

	public class doEverythingListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {

			try {
				getOriginalData(originalData);
				int z = 0;
				int y = 0;
				while (originalData[z] != null) {
					Infix2Postfix convert = new Infix2Postfix();
					Postfix2Infix reConvert = new Postfix2Infix();
					String postFix = convert.convert(originalData[z]);
					String postFix2 = "";
					for (int i = 0; i < postFix.length(); i++) {
						if (postFix.charAt(i) != ' ') {
							postFix2 += postFix.charAt(i);
						}
					}

					Tokenizer tokenize = new Tokenizer();

					ADTList postTokens = tokenize.tokenizer(postFix);

					String infix = reConvert.postfix2infix(postTokens);
					if (infix.equals("The above infix expression is not a valid expression.")) {
						displayData[y] = z + ". Original expression: "
								+ originalData[z];
						displayData[++y] = z + ". "
								+ infix;
					} else {
						displayData[y] = z + ". Original expression: "	+ originalData[z];
						displayData[++y] = z + ". Converted postfix expression: " + postFix2;
						displayData[++y] = z + ". Converted infix expression: "	+ infix;
					}
					y++;
					z++;
				}

			
			} catch (FileNotFoundException e) {

				e.printStackTrace();
			}

			display.repaint();
		}
	}

	public static void getOriginalData(String[] array)throws FileNotFoundException {
		PrintWriter outFile = new PrintWriter(new FileOutputStream(new File("test.txt"), true));
		Scanner fileInput = new Scanner(new File("test.txt"));

		int i = 0;
		while (fileInput.hasNextLine()) {
			array[i] = fileInput.nextLine();
			i++;
		}

	}
}
